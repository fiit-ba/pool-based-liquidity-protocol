{
  "source": {
    "hash": "0x711c3073e84539cbcf5bab9079e537afe53d35ee6ab147b88e9aefae305293aa",
    "language": "ink! 3.0.1",
    "compiler": "rustc 1.61.0-nightly"
  },
  "contract": {
    "name": "liquidity_pool_manager_contract",
    "version": "1.0.0",
    "authors": [
      "Richard Gazdik <xgazdik@stuba.sk>"
    ]
  },
  "V3": {
    "spec": {
      "constructors": [
        {
          "args": [
            {
              "label": "loan_hash",
              "type": {
                "displayName": [
                  "Hash"
                ],
                "type": 10
              }
            },
            {
              "label": "btoken_hash",
              "type": {
                "displayName": [
                  "Hash"
                ],
                "type": 10
              }
            }
          ],
          "docs": [
            "# Returns",
            "Returns Self",
            "",
            "# Arguments",
            "* `loan_hash` - hash of the loan deployed smart contract",
            "* `btoken_hash` - hash of the btoken deployed smart contract",
            "",
            "# Description",
            "Constructor for initializing our contract."
          ],
          "label": "new",
          "payable": true,
          "selector": "0x9bae9d5e"
        }
      ],
      "docs": [
        " This contract is responsible for the main logic of the protocol",
        " It uses both loan and btoken contracts and directly interact with them."
      ],
      "events": [],
      "messages": [
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "HasRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "address",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "HasRoleInput2"
                ],
                "type": 7
              }
            }
          ],
          "docs": [],
          "label": "AccessControl::has_role",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "HasRoleOutput"
            ],
            "type": 9
          },
          "selector": "0xc1d9ac18"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "GetRoleAdminInput1"
                ],
                "type": 1
              }
            }
          ],
          "docs": [],
          "label": "AccessControl::get_role_admin",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "GetRoleAdminOutput"
            ],
            "type": 1
          },
          "selector": "0x83da3bb2"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RenounceRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "account",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RenounceRoleInput2"
                ],
                "type": 7
              }
            }
          ],
          "docs": [],
          "label": "AccessControl::renounce_role",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "RenounceRoleOutput"
            ],
            "type": 16
          },
          "selector": "0xeaf1248a"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "GrantRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "account",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "GrantRoleInput2"
                ],
                "type": 7
              }
            }
          ],
          "docs": [],
          "label": "AccessControl::grant_role",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "GrantRoleOutput"
            ],
            "type": 16
          },
          "selector": "0x4ac062fd"
        },
        {
          "args": [
            {
              "label": "role",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RevokeRoleInput1"
                ],
                "type": 1
              }
            },
            {
              "label": "account",
              "type": {
                "displayName": [
                  "accesscontrol_external",
                  "RevokeRoleInput2"
                ],
                "type": 7
              }
            }
          ],
          "docs": [],
          "label": "AccessControl::revoke_role",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "accesscontrol_external",
              "RevokeRoleOutput"
            ],
            "type": 16
          },
          "selector": "0x6e4f0991"
        },
        {
          "args": [],
          "docs": [],
          "label": "Pausable::paused",
          "mutates": false,
          "payable": false,
          "returnType": {
            "displayName": [
              "pausable_external",
              "PausedOutput"
            ],
            "type": 9
          },
          "selector": "0xd123ce11"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetCollateralDisallowanceInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset to be disallowed as a collateral",
            "",
            " # Description",
            " set_collateral_disallowance is ADMIN function to make asset uncollateralizable"
          ],
          "label": "PoolManager::set_collateral_disallowance",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "SetCollateralDisallowanceOutput"
            ],
            "type": 18
          },
          "selector": "0x95281278"
        },
        {
          "args": [
            {
              "label": "loan_id",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "RepayInput1"
                ],
                "type": 24
              }
            },
            {
              "label": "repay_amount",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "RepayInput2"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a bool with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `loan_id` - Id of the loan to be repayed",
            " * `repay_amount` - Balance of the asset repayed to the contract",
            "",
            " # Description",
            " repay is an important function which handles the process of repaying borrowed assets to the contract",
            " true = repayed, false = already liquidated"
          ],
          "label": "PoolManager::repay",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "RepayOutput"
            ],
            "type": 28
          },
          "selector": "0xf5af410e"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "BorrowInput1"
                ],
                "type": 7
              }
            },
            {
              "label": "collateral_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "BorrowInput2"
                ],
                "type": 7
              }
            },
            {
              "label": "amount",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "BorrowInput3"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of the asset that is borrowed",
            " * `collateral_address` - AccountId of the asset that is colateralized",
            " * `amount` - the Balance of how much asset is borrowed",
            "",
            " # Description",
            " borrow is an important function which handles the process of borrowing assets from the contract"
          ],
          "label": "PoolManager::borrow",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "BorrowOutput"
            ],
            "type": 18
          },
          "selector": "0x62503150"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetAssetAcceptanceInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a bool",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset we want to know if it is lendable to the contract.",
            "",
            " # Description",
            " get_asset_acceptance is helper function",
            " It is responsible for getting bool representation of acceptance of the specific asset."
          ],
          "label": "PoolManager::get_asset_acceptance",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetAssetAcceptanceOutput"
            ],
            "type": 9
          },
          "selector": "0x49c00347"
        },
        {
          "args": [
            {
              "label": "btoken_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetAssetFromBtokenInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns an AccountId with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `btoken_address` - AccountId of bToken from which we want to get its bounded asset address",
            "",
            " # Description",
            " get_asset_from_btoken is helper function",
            " It is responsible for getting asset address which is bound to btoken address."
          ],
          "label": "PoolManager::get_asset_from_btoken",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetAssetFromBtokenOutput"
            ],
            "type": 29
          },
          "selector": "0x164f12e6"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetCollateralAcceptanceInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a bool",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset we want to know if it is collateralizable",
            "",
            " # Description",
            " get_collateral_acceptance is helper function",
            " It is responsible for getting bool representation of acceptance of the specific collateral asset."
          ],
          "label": "PoolManager::get_collateral_acceptance",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetCollateralAcceptanceOutput"
            ],
            "type": 9
          },
          "selector": "0x2427cfe3"
        },
        {
          "args": [
            {
              "label": "asset_from",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetConversionRateInput1"
                ],
                "type": 7
              }
            },
            {
              "label": "asset_to",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetConversionRateInput2"
                ],
                "type": 7
              }
            },
            {
              "label": "amount_from",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetConversionRateInput3"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Balance",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_from` - AccountId of source asset from which the conversion takes place",
            " * `asset_to` - AccountId of destionation asset to which the conversion takes place",
            " * `amount_from` - Balance of how much of asset_from we want to transfer to asset_to",
            "",
            " # Description",
            " get_conversion_rate is helper function responsible for getting conversion rates between assets",
            " It says us how many of asset_to assets do we get for amount_from of asset_from asset."
          ],
          "label": "PoolManager::get_conversion_rate",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetConversionRateOutput"
            ],
            "type": 13
          },
          "selector": "0x7d174aff"
        },
        {
          "args": [
            {
              "label": "asset_from",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetConversionRateInput1"
                ],
                "type": 7
              }
            },
            {
              "label": "asset_to",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetConversionRateInput2"
                ],
                "type": 7
              }
            },
            {
              "label": "exchange_rate",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetConversionRateInput3"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " # Returns",
            " Without a return value",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_from` - AccountId of source asset from which the conversion takes place",
            " * `asset_to` - AccountId of destionation asset to which the conversion takes place",
            " * `exchange_rate` - Balance of 1 asset_from to X asset_to conversion",
            "",
            " # Description",
            " set_conversion_rate function is helper function responsible for setting conversion rates between assets",
            " It says us how many of asset_to assets do we get for 1 asset_from asset."
          ],
          "label": "PoolManager::set_conversion_rate",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "SetConversionRateOutput"
            ],
            "type": 18
          },
          "selector": "0xcec028de"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetBtokenFromAssetInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns an AccountId with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset from which we want to get its btoken address",
            "",
            " # Description",
            " get_btoken_from_asset is helper function",
            " It is responsible for getting address of btoken for supplying asset addres into the contract"
          ],
          "label": "PoolManager::get_btoken_from_asset",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetBtokenFromAssetOutput"
            ],
            "type": 29
          },
          "selector": "0x85539509"
        },
        {
          "args": [
            {
              "label": "btoken_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "WithdrawInput1"
                ],
                "type": 7
              }
            },
            {
              "label": "btoken_amount",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "WithdrawInput2"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `btoken_address` - AccountId of the btoken that user got for lending asset",
            " * `btoken_amount` - the Balance of how much btoken does he want to withdraw",
            "",
            " # Description",
            " withdraw is an important function which handles the process of withdrawing asset from the contract"
          ],
          "label": "PoolManager::withdraw",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "WithdrawOutput"
            ],
            "type": 18
          },
          "selector": "0xf9a7f7bc"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetAssetDisallowanceInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset to be disallowed",
            "",
            " # Description",
            " set_asset_disallowance is ADMIN function to make asset unlendable"
          ],
          "label": "PoolManager::set_asset_disallowance",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "SetAssetDisallowanceOutput"
            ],
            "type": 18
          },
          "selector": "0xfa97531b"
        },
        {
          "args": [
            {
              "label": "loan_id",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "LiquidateLoanInput1"
                ],
                "type": 24
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `loan_id` - Id of the loan to be liquidated",
            "",
            " # Description",
            " liquidate is an important function which handles the process of liquidating unhealthy assets"
          ],
          "label": "PoolManager::liquidate_loan",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "LiquidateLoanOutput"
            ],
            "type": 18
          },
          "selector": "0xd42c5f00"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetAssetAllowanceInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset to be allowed",
            " * `name` optional String for specifying our shares name in Metadata",
            " * `symbol` optional String for specifying our shares symbol in Metadata",
            " * `decimal` u8 for specifying our shares decimals in Metadata",
            "",
            " # Description",
            " set_asset_allowance is ADMIN function to make asset lendable and borrowable"
          ],
          "label": "PoolManager::set_asset_allowance",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "SetAssetAllowanceOutput"
            ],
            "type": 18
          },
          "selector": "0x1a98ceba"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetTotalAssetInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Balance with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset from which we want to get its total Balance",
            "",
            " # Description",
            " get_total_asset is helper function",
            " It is responsible for getting total asset Balance for given asset addresss (lended + in pool)."
          ],
          "label": "PoolManager::get_total_asset",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetTotalAssetOutput"
            ],
            "type": 30
          },
          "selector": "0x5d75f714"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "LendInput1"
                ],
                "type": 7
              }
            },
            {
              "label": "amount",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "LendInput2"
                ],
                "type": 13
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of the asset that is lended",
            " * `amount` - the Balance of how much asset is lended",
            "",
            " # Description",
            " lend is an important function which handles the process of lending into the contract"
          ],
          "label": "PoolManager::lend",
          "mutates": true,
          "payable": true,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "LendOutput"
            ],
            "type": 18
          },
          "selector": "0x5f81ba97"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "GetTotalBtokenInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Balance with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset from which we want to get btoken bounded total Balance",
            "",
            " # Description",
            " get_total_btoken is helper function",
            " It is responsible for getting total Balance for given pool addresss."
          ],
          "label": "PoolManager::get_total_btoken",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "GetTotalBtokenOutput"
            ],
            "type": 30
          },
          "selector": "0xa71fedd5"
        },
        {
          "args": [
            {
              "label": "asset_address",
              "type": {
                "displayName": [
                  "poolmanager_external",
                  "SetCollateralAllowanceInput1"
                ],
                "type": 7
              }
            }
          ],
          "docs": [
            " # Returns",
            " Returns a Ok(()) with success and PoolManagerError otherwise",
            "",
            " # Arguments",
            " * `&mut self` - used so we can mutate variables of self component",
            " * `asset_address` - AccountId of asset to be allowed as a collateral",
            "",
            " # Description",
            " set_collateral_allowance is ADMIN function to make asset collateralizable for the loans"
          ],
          "label": "PoolManager::set_collateral_allowance",
          "mutates": true,
          "payable": false,
          "returnType": {
            "displayName": [
              "poolmanager_external",
              "SetCollateralAllowanceOutput"
            ],
            "type": 18
          },
          "selector": "0x26b56782"
        }
      ]
    },
    "storage": {
      "struct": {
        "fields": [
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0xe7e2abb5d4c5d06277682a389146d01838750699f7a741604a9eb7f7d3947878",
                        "ty": 0
                      }
                    },
                    "name": "admin_roles"
                  },
                  {
                    "layout": {
                      "cell": {
                        "key": "0xe8e2abb5d4c5d06277682a389146d01838750699f7a741604a9eb7f7d3947878",
                        "ty": 5
                      }
                    },
                    "name": "members"
                  },
                  {
                    "layout": {
                      "enum": {
                        "dispatchKey": "0xe9e2abb5d4c5d06277682a389146d01838750699f7a741604a9eb7f7d3947878",
                        "variants": {
                          "0": {
                            "fields": [
                              {
                                "layout": {
                                  "cell": {
                                    "key": "0xeae2abb5d4c5d06277682a389146d01838750699f7a741604a9eb7f7d3947878",
                                    "ty": 8
                                  }
                                },
                                "name": null
                              }
                            ]
                          },
                          "1": {
                            "fields": []
                          }
                        }
                      }
                    },
                    "name": "_reserved"
                  }
                ]
              }
            },
            "name": "access"
          },
          {
            "layout": {
              "struct": {
                "fields": [
                  {
                    "layout": {
                      "cell": {
                        "key": "0x08a7b56d2e21df13e0d338ab2478141ad32182ef715b6dfe15ce91e0546d40a2",
                        "ty": 9
                      }
                    },
                    "name": "paused"
                  },
                  {
                    "layout": {
                      "enum": {
                        "dispatchKey": "0x09a7b56d2e21df13e0d338ab2478141ad32182ef715b6dfe15ce91e0546d40a2",
                        "variants": {
                          "0": {
                            "fields": [
                              {
                                "layout": {
                                  "cell": {
                                    "key": "0x0aa7b56d2e21df13e0d338ab2478141ad32182ef715b6dfe15ce91e0546d40a2",
                                    "ty": 8
                                  }
                                },
                                "name": null
                              }
                            ]
                          },
                          "1": {
                            "fields": []
                          }
                        }
                      }
                    },
                    "name": "_reserved"
                  }
                ]
              }
            },
            "name": "pause"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "ty": 10
              }
            },
            "name": "btoken_contract_code_hash"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0100000000000000000000000000000000000000000000000000000000000000",
                "ty": 7
              }
            },
            "name": "loan_account"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0200000000000000000000000000000000000000000000000000000000000000",
                "ty": 11
              }
            },
            "name": "conversion_rates"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0300000000000000000000000000000000000000000000000000000000000000",
                "ty": 14
              }
            },
            "name": "assets_lended"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0400000000000000000000000000000000000000000000000000000000000000",
                "ty": 14
              }
            },
            "name": "asset_btoken"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0500000000000000000000000000000000000000000000000000000000000000",
                "ty": 14
              }
            },
            "name": "btoken_asset"
          },
          {
            "layout": {
              "cell": {
                "key": "0x0600000000000000000000000000000000000000000000000000000000000000",
                "ty": 15
              }
            },
            "name": "collateral_accepted"
          }
        ]
      }
    },
    "types": [
      {
        "id": 0,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 2,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 1
            },
            {
              "name": "V",
              "type": 1
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 1,
        "type": {
          "def": {
            "primitive": "u32"
          }
        }
      },
      {
        "id": 2,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 3,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_primitives",
            "Key"
          ]
        }
      },
      {
        "id": 3,
        "type": {
          "def": {
            "array": {
              "len": 32,
              "type": 4
            }
          }
        }
      },
      {
        "id": 4,
        "type": {
          "def": {
            "primitive": "u8"
          }
        }
      },
      {
        "id": 5,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 2,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 6
            },
            {
              "name": "V",
              "type": 8
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 6,
        "type": {
          "def": {
            "tuple": [
              1,
              7
            ]
          }
        }
      },
      {
        "id": 7,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 3,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "AccountId"
          ]
        }
      },
      {
        "id": 8,
        "type": {
          "def": {
            "tuple": []
          }
        }
      },
      {
        "id": 9,
        "type": {
          "def": {
            "primitive": "bool"
          }
        }
      },
      {
        "id": 10,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "type": 3,
                  "typeName": "[u8; 32]"
                }
              ]
            }
          },
          "path": [
            "ink_env",
            "types",
            "Hash"
          ]
        }
      },
      {
        "id": 11,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 2,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 12
            },
            {
              "name": "V",
              "type": 13
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 12,
        "type": {
          "def": {
            "tuple": [
              7,
              7
            ]
          }
        }
      },
      {
        "id": 13,
        "type": {
          "def": {
            "primitive": "u128"
          }
        }
      },
      {
        "id": 14,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 2,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 7
            },
            {
              "name": "V",
              "type": 7
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 15,
        "type": {
          "def": {
            "composite": {
              "fields": [
                {
                  "name": "offset_key",
                  "type": 2,
                  "typeName": "Key"
                }
              ]
            }
          },
          "params": [
            {
              "name": "K",
              "type": 7
            },
            {
              "name": "V",
              "type": 9
            }
          ],
          "path": [
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id": 16,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 8
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 17
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 8
            },
            {
              "name": "E",
              "type": 17
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 17,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "InvalidCaller"
                },
                {
                  "index": 1,
                  "name": "MissingRole"
                },
                {
                  "index": 2,
                  "name": "RoleRedundant"
                }
              ]
            }
          },
          "path": [
            "contracts",
            "traits",
            "errors",
            "access_control",
            "AccessControlError"
          ]
        }
      },
      {
        "id": 18,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 8
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 19
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 8
            },
            {
              "name": "E",
              "type": 19
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 19,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 20,
                      "typeName": "PSP22Error"
                    }
                  ],
                  "index": 0,
                  "name": "PSP22Error"
                },
                {
                  "fields": [
                    {
                      "type": 22,
                      "typeName": "PSP34Error"
                    }
                  ],
                  "index": 1,
                  "name": "PSP34Error"
                },
                {
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "AccessControlError"
                    }
                  ],
                  "index": 2,
                  "name": "AccessControlError"
                },
                {
                  "fields": [
                    {
                      "type": 23,
                      "typeName": "PausableError"
                    }
                  ],
                  "index": 3,
                  "name": "PausableError"
                },
                {
                  "index": 4,
                  "name": "AssetNotFound"
                },
                {
                  "index": 5,
                  "name": "BTokenNotFound"
                },
                {
                  "index": 6,
                  "name": "AssetAlreadySupported"
                },
                {
                  "index": 7,
                  "name": "AssetNotSupported"
                },
                {
                  "index": 8,
                  "name": "PoolIsNotEmpty"
                },
                {
                  "index": 9,
                  "name": "CollateralAlreadySupported"
                },
                {
                  "index": 10,
                  "name": "CollateralAlreadyUnsupported"
                },
                {
                  "index": 11,
                  "name": "CollateralNotSupported"
                },
                {
                  "index": 12,
                  "name": "InsufficientAllowance"
                },
                {
                  "index": 13,
                  "name": "InsufficientBalance"
                },
                {
                  "index": 14,
                  "name": "InsufficientPoolBalance"
                },
                {
                  "index": 15,
                  "name": "AmountNotSupported"
                },
                {
                  "index": 16,
                  "name": "NotTheLoanOwner"
                },
                {
                  "index": 17,
                  "name": "LoanAlreadyLiquidated"
                },
                {
                  "index": 18,
                  "name": "LoanUnliquidable"
                }
              ]
            }
          },
          "path": [
            "liquidity_pool_protocol",
            "traits",
            "liquidity_pool_manager",
            "PoolManagerError"
          ]
        }
      },
      {
        "id": 20,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 21,
                      "typeName": "String"
                    }
                  ],
                  "index": 0,
                  "name": "Custom"
                },
                {
                  "index": 1,
                  "name": "InsufficientBalance"
                },
                {
                  "index": 2,
                  "name": "InsufficientAllowance"
                },
                {
                  "index": 3,
                  "name": "ZeroRecipientAddress"
                },
                {
                  "index": 4,
                  "name": "ZeroSenderAddress"
                },
                {
                  "fields": [
                    {
                      "type": 21,
                      "typeName": "String"
                    }
                  ],
                  "index": 5,
                  "name": "SafeTransferCheckFailed"
                }
              ]
            }
          },
          "path": [
            "contracts",
            "traits",
            "errors",
            "psp22",
            "PSP22Error"
          ]
        }
      },
      {
        "id": 21,
        "type": {
          "def": {
            "primitive": "str"
          }
        }
      },
      {
        "id": 22,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 21,
                      "typeName": "String"
                    }
                  ],
                  "index": 0,
                  "name": "Custom"
                },
                {
                  "index": 1,
                  "name": "SelfApprove"
                },
                {
                  "index": 2,
                  "name": "NotApproved"
                },
                {
                  "index": 3,
                  "name": "TokenExists"
                },
                {
                  "index": 4,
                  "name": "TokenNotExists"
                },
                {
                  "fields": [
                    {
                      "type": 21,
                      "typeName": "String"
                    }
                  ],
                  "index": 5,
                  "name": "SafeTransferCheckFailed"
                }
              ]
            }
          },
          "path": [
            "contracts",
            "traits",
            "errors",
            "psp34",
            "PSP34Error"
          ]
        }
      },
      {
        "id": 23,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "index": 0,
                  "name": "Paused"
                },
                {
                  "index": 1,
                  "name": "NotPaused"
                }
              ]
            }
          },
          "path": [
            "contracts",
            "traits",
            "errors",
            "pausable",
            "PausableError"
          ]
        }
      },
      {
        "id": 24,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u8"
                    }
                  ],
                  "index": 0,
                  "name": "U8"
                },
                {
                  "fields": [
                    {
                      "type": 25,
                      "typeName": "u16"
                    }
                  ],
                  "index": 1,
                  "name": "U16"
                },
                {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "u32"
                    }
                  ],
                  "index": 2,
                  "name": "U32"
                },
                {
                  "fields": [
                    {
                      "type": 26,
                      "typeName": "u64"
                    }
                  ],
                  "index": 3,
                  "name": "U64"
                },
                {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "u128"
                    }
                  ],
                  "index": 4,
                  "name": "U128"
                },
                {
                  "fields": [
                    {
                      "type": 27,
                      "typeName": "Vec<u8>"
                    }
                  ],
                  "index": 5,
                  "name": "Bytes"
                }
              ]
            }
          },
          "path": [
            "contracts",
            "traits",
            "psp34",
            "psp34",
            "Id"
          ]
        }
      },
      {
        "id": 25,
        "type": {
          "def": {
            "primitive": "u16"
          }
        }
      },
      {
        "id": 26,
        "type": {
          "def": {
            "primitive": "u64"
          }
        }
      },
      {
        "id": 27,
        "type": {
          "def": {
            "sequence": {
              "type": 4
            }
          }
        }
      },
      {
        "id": 28,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 9
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 19
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 9
            },
            {
              "name": "E",
              "type": 19
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 29,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 7
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 19
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 7
            },
            {
              "name": "E",
              "type": 19
            }
          ],
          "path": [
            "Result"
          ]
        }
      },
      {
        "id": 30,
        "type": {
          "def": {
            "variant": {
              "variants": [
                {
                  "fields": [
                    {
                      "type": 13
                    }
                  ],
                  "index": 0,
                  "name": "Ok"
                },
                {
                  "fields": [
                    {
                      "type": 19
                    }
                  ],
                  "index": 1,
                  "name": "Err"
                }
              ]
            }
          },
          "params": [
            {
              "name": "T",
              "type": 13
            },
            {
              "name": "E",
              "type": 19
            }
          ],
          "path": [
            "Result"
          ]
        }
      }
    ]
  }
}
